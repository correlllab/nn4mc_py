<%BEGIN_DEFINITION_TEMPLATE>
/********************
    maxpool1d.cpp

    Code generated using nn4mc.

    This file implements a 2 dimensional maximum pooling layer.

*/

#include "maxpool1d.h"
#include "activations.h"
#include <math.h>
#include <stdlib.h>

#define max(a, b) (((a)>(b) ? (a) : (b)))
#define min(a, b) (((a)<(b) ? (a) : (b)))

struct MaxPooling1D buildMaxPooling1D(<%INDEX_DATATYPE_DELIMITER> pool_size, <%INDEX_DATATYPE_DELIMITER> strides,<%INDEX_DATATYPE_DELIMITER> input_sh0, <%INDEX_DATATYPE_DELIMITER> input_sh1)
{
	struct MaxPooling1D layer;

	layer.strides = strides;
    layer.pool_size = pool_size;
    layer.input_shape[0] = input_sh0;
    layer.input_shape[1] = input_sh1;

	layer.output_shape[0] = floor(input_sh0 / pool_size);
	layer.output_shape[1] = pool_size;

	return layer;
}


<%LAYER_DATATYPE_DELIMITER> * fwdMaxPooling1D(struct MaxPooling1D L, <%LAYER_DATATYPE_DELIMITER> * input)
{

    // Data array:
     <%LAYER_DATATYPE_DELIMITER> * h = (<%LAYER_DATATYPE_DELIMITER>*)malloc((int)L.output_shape[0]*L.output_shape[1] * sizeof(<%LAYER_DATATYPE_DELIMITER>));

	// Loop through to calculate the output at each point
	for(<%INDEX_DATATYPE_DELIMITER> i = 0; i < L.output_shape[1]; i++)
	{
		for(<%INDEX_DATATYPE_DELIMITER> j = 0; j < L.output_shape[0]; j++)
		{
      <%INDEX_DATATYPE_DELIMITER> idx = i*L.output_shape[1] + j;

      <%LAYER_DATATYPE_DELIMITER> x1 = input[(2*i)*L.input_shape[1] + j];
      <%LAYER_DATATYPE_DELIMITER> x2 = input[(2*i+1)*L.input_shape[1] + j];
      h[idx] = max(x1, x2);

			if(L.activation != 0xB)
				h[i] = activate(h[i],L.output_shape[0],L.activation);
		}
	}

    free(input);
    return h;
}

<%END_DEFINITION_TEMPLATE>


<%BEGIN_INITIALIZE_TEMPLATE>
       <%LAYER_NAME> = buildMaxPooling1D(<%POOL_SIZE>, <%STRIDES>, <%INPUT_SHAPE_0>,  <%INPUT_SHAPE_1>);
<%END_INITIALIZE_TEMPLATE>

<%BEGIN_CALL_TEMPLATE>
        data = fwdMaxPooling1D(<%LAYER_NAME>, <%INPUT>);
<%END_CALL_TEMPLATE>
