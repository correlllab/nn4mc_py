# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_guy', [dirname(__file__)])
        except ImportError:
            import _guy
            return _guy
        if fp is not None:
            try:
                _mod = imp.load_module('_guy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _guy = swig_import_helper()
    del swig_import_helper
else:
    import _guy
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def build_layer_gru(W, U, b, recurrent_activation, activation, input_shape_0, input_shape_1, output_units):
    return _guy.build_layer_gru(W, U, b, recurrent_activation, activation, input_shape_0, input_shape_1, output_units)
build_layer_gru = _guy.build_layer_gru

def fwd_gru(L, input):
    return _guy.fwd_gru(L, input)
fwd_gru = _guy.fwd_gru
class GRU(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GRU, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GRU, name)
    __repr__ = _swig_repr
    __swig_setmethods__["weights"] = _guy.GRU_weights_set
    __swig_getmethods__["weights"] = _guy.GRU_weights_get
    if _newclass:
        weights = _swig_property(_guy.GRU_weights_get, _guy.GRU_weights_set)
    __swig_setmethods__["big_u"] = _guy.GRU_big_u_set
    __swig_getmethods__["big_u"] = _guy.GRU_big_u_get
    if _newclass:
        big_u = _swig_property(_guy.GRU_big_u_get, _guy.GRU_big_u_set)
    __swig_setmethods__["biases"] = _guy.GRU_biases_set
    __swig_getmethods__["biases"] = _guy.GRU_biases_get
    if _newclass:
        biases = _swig_property(_guy.GRU_biases_get, _guy.GRU_biases_set)
    __swig_setmethods__["h_tm1"] = _guy.GRU_h_tm1_set
    __swig_getmethods__["h_tm1"] = _guy.GRU_h_tm1_get
    if _newclass:
        h_tm1 = _swig_property(_guy.GRU_h_tm1_get, _guy.GRU_h_tm1_set)
    __swig_setmethods__["weight_shape"] = _guy.GRU_weight_shape_set
    __swig_getmethods__["weight_shape"] = _guy.GRU_weight_shape_get
    if _newclass:
        weight_shape = _swig_property(_guy.GRU_weight_shape_get, _guy.GRU_weight_shape_set)
    __swig_setmethods__["big_u_shape"] = _guy.GRU_big_u_shape_set
    __swig_getmethods__["big_u_shape"] = _guy.GRU_big_u_shape_get
    if _newclass:
        big_u_shape = _swig_property(_guy.GRU_big_u_shape_get, _guy.GRU_big_u_shape_set)
    __swig_setmethods__["biases_shape"] = _guy.GRU_biases_shape_set
    __swig_getmethods__["biases_shape"] = _guy.GRU_biases_shape_get
    if _newclass:
        biases_shape = _swig_property(_guy.GRU_biases_shape_get, _guy.GRU_biases_shape_set)
    __swig_setmethods__["recurrent_activation"] = _guy.GRU_recurrent_activation_set
    __swig_getmethods__["recurrent_activation"] = _guy.GRU_recurrent_activation_get
    if _newclass:
        recurrent_activation = _swig_property(_guy.GRU_recurrent_activation_get, _guy.GRU_recurrent_activation_set)
    __swig_setmethods__["activation"] = _guy.GRU_activation_set
    __swig_getmethods__["activation"] = _guy.GRU_activation_get
    if _newclass:
        activation = _swig_property(_guy.GRU_activation_get, _guy.GRU_activation_set)
    __swig_setmethods__["input_shape"] = _guy.GRU_input_shape_set
    __swig_getmethods__["input_shape"] = _guy.GRU_input_shape_get
    if _newclass:
        input_shape = _swig_property(_guy.GRU_input_shape_get, _guy.GRU_input_shape_set)
    __swig_setmethods__["output_shape"] = _guy.GRU_output_shape_set
    __swig_getmethods__["output_shape"] = _guy.GRU_output_shape_get
    if _newclass:
        output_shape = _swig_property(_guy.GRU_output_shape_get, _guy.GRU_output_shape_set)

    def __init__(self):
        this = _guy.new_GRU()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _guy.delete_GRU
    __del__ = lambda self: None
GRU_swigregister = _guy.GRU_swigregister
GRU_swigregister(GRU)


def activate(arg1, arg2, arg3):
    return _guy.activate(arg1, arg2, arg3)
activate = _guy.activate

def sigmoid(arg1, arg2):
    return _guy.sigmoid(arg1, arg2)
sigmoid = _guy.sigmoid

def softplus(arg1, arg2):
    return _guy.softplus(arg1, arg2)
softplus = _guy.softplus

def softsign(arg1, arg2):
    return _guy.softsign(arg1, arg2)
softsign = _guy.softsign

def hard_sigmoid(arg1, arg2):
    return _guy.hard_sigmoid(arg1, arg2)
hard_sigmoid = _guy.hard_sigmoid

def exp_activation(arg1, arg2):
    return _guy.exp_activation(arg1, arg2)
exp_activation = _guy.exp_activation

def exponential(arg1):
    return _guy.exponential(arg1)
exponential = _guy.exponential

def relu(arg1, arg2):
    return _guy.relu(arg1, arg2)
relu = _guy.relu

def elu(arg1, arg2, arg3):
    return _guy.elu(arg1, arg2, arg3)
elu = _guy.elu

def selu(arg1, arg2):
    return _guy.selu(arg1, arg2)
selu = _guy.selu

def hyper_tan(arg1, arg2):
    return _guy.hyper_tan(arg1, arg2)
hyper_tan = _guy.hyper_tan

def softmax(arg1, arg2):
    return _guy.softmax(arg1, arg2)
softmax = _guy.softmax
class input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, input, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _guy.new_input(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _guy.delete_input
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _guy.input___getitem__(self, index)

    def __setitem__(self, index, value):
        return _guy.input___setitem__(self, index, value)

    def cast(self):
        return _guy.input_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _guy.input_frompointer
    if _newclass:
        frompointer = staticmethod(_guy.input_frompointer)
input_swigregister = _guy.input_swigregister
input_swigregister(input)
cvar = _guy.cvar
conv1d_1_W = cvar.conv1d_1_W
conv1d_1_b = cvar.conv1d_1_b
conv1d_2_W = cvar.conv1d_2_W
conv1d_2_b = cvar.conv1d_2_b
dense_1_W = cvar.dense_1_W
dense_1_b = cvar.dense_1_b
dense_2_W = cvar.dense_2_W
dense_2_b = cvar.dense_2_b
dense_3_W = cvar.dense_3_W
dense_3_b = cvar.dense_3_b
dense_4_W = cvar.dense_4_W
dense_4_b = cvar.dense_4_b
dense_5_W = cvar.dense_5_W
dense_5_b = cvar.dense_5_b
dense_6_W = cvar.dense_6_W
dense_6_b = cvar.dense_6_b
dense_7_W = cvar.dense_7_W
dense_7_b = cvar.dense_7_b
dense_8_W = cvar.dense_8_W
dense_8_b = cvar.dense_8_b

def input_frompointer(t):
    return _guy.input_frompointer(t)
input_frompointer = _guy.input_frompointer

# This file is compatible with both classic and new-style classes.


