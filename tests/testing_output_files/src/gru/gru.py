# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gru
else:
    import _gru

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def build_layer_gru(W, U, b, recurrent_activation, activation, input_shape_0, input_shape_1, output_units):
    return _gru.build_layer_gru(W, U, b, recurrent_activation, activation, input_shape_0, input_shape_1, output_units)

def fwd_gru(L, input):
    return _gru.fwd_gru(L, input)
class GRU(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    weights = property(_gru.GRU_weights_get, _gru.GRU_weights_set)
    big_u = property(_gru.GRU_big_u_get, _gru.GRU_big_u_set)
    biases = property(_gru.GRU_biases_get, _gru.GRU_biases_set)
    h_tm1 = property(_gru.GRU_h_tm1_get, _gru.GRU_h_tm1_set)
    weight_shape = property(_gru.GRU_weight_shape_get, _gru.GRU_weight_shape_set)
    big_u_shape = property(_gru.GRU_big_u_shape_get, _gru.GRU_big_u_shape_set)
    biases_shape = property(_gru.GRU_biases_shape_get, _gru.GRU_biases_shape_set)
    recurrent_activation = property(_gru.GRU_recurrent_activation_get, _gru.GRU_recurrent_activation_set)
    activation = property(_gru.GRU_activation_get, _gru.GRU_activation_set)
    input_shape = property(_gru.GRU_input_shape_get, _gru.GRU_input_shape_set)
    output_shape = property(_gru.GRU_output_shape_get, _gru.GRU_output_shape_set)

    def __init__(self):
        _gru.GRU_swiginit(self, _gru.new_GRU())
    __swig_destroy__ = _gru.delete_GRU

# Register GRU in _gru:
_gru.GRU_swigregister(GRU)


def activate(arg1, arg2, arg3):
    return _gru.activate(arg1, arg2, arg3)

def sigmoid(arg1, arg2):
    return _gru.sigmoid(arg1, arg2)

def softplus(arg1, arg2):
    return _gru.softplus(arg1, arg2)

def softsign(arg1, arg2):
    return _gru.softsign(arg1, arg2)

def hard_sigmoid(arg1, arg2):
    return _gru.hard_sigmoid(arg1, arg2)

def exp_activation(arg1, arg2):
    return _gru.exp_activation(arg1, arg2)

def exponential(arg1):
    return _gru.exponential(arg1)

def relu(arg1, arg2):
    return _gru.relu(arg1, arg2)

def elu(arg1, arg2, arg3):
    return _gru.elu(arg1, arg2, arg3)

def selu(arg1, arg2):
    return _gru.selu(arg1, arg2)

def hyper_tan(arg1, arg2):
    return _gru.hyper_tan(arg1, arg2)

def softmax(arg1, arg2):
    return _gru.softmax(arg1, arg2)
class input(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _gru.input_swiginit(self, _gru.new_input(nelements))
    __swig_destroy__ = _gru.delete_input

    def __getitem__(self, index):
        return _gru.input___getitem__(self, index)

    def __setitem__(self, index, value):
        return _gru.input___setitem__(self, index, value)

    def cast(self):
        return _gru.input_cast(self)

    @staticmethod
    def frompointer(t):
        return _gru.input_frompointer(t)

# Register input in _gru:
_gru.input_swigregister(input)
cvar = _gru.cvar
conv1d_1_W = cvar.conv1d_1_W
conv1d_1_b = cvar.conv1d_1_b
conv1d_2_W = cvar.conv1d_2_W
conv1d_2_b = cvar.conv1d_2_b
dense_1_W = cvar.dense_1_W
dense_1_b = cvar.dense_1_b
dense_2_W = cvar.dense_2_W
dense_2_b = cvar.dense_2_b
dense_3_W = cvar.dense_3_W
dense_3_b = cvar.dense_3_b
dense_4_W = cvar.dense_4_W
dense_4_b = cvar.dense_4_b
dense_5_W = cvar.dense_5_W
dense_5_b = cvar.dense_5_b
dense_6_W = cvar.dense_6_W
dense_6_b = cvar.dense_6_b
dense_7_W = cvar.dense_7_W
dense_7_b = cvar.dense_7_b
dense_8_W = cvar.dense_8_W
dense_8_b = cvar.dense_8_b

def input_frompointer(t):
    return _gru.input_frompointer(t)



